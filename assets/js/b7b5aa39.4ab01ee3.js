"use strict";(self.webpackChunkmongodb_sprout_workshop=self.webpackChunkmongodb_sprout_workshop||[]).push([[723],{6874:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var o=t(4848),d=t(8453);const s={},i="Time to Code!",r={id:"spring-data-mongodb/Excercises",title:"Time to Code!",description:"Now that we've done an overview of CRUD operations with Spring Data MongoDB,",source:"@site/docs/04-spring-data-mongodb/8-Excercises.mdx",sourceDirName:"04-spring-data-mongodb",slug:"/spring-data-mongodb/Excercises",permalink:"/mongodb-sprout-workshop/docs/spring-data-mongodb/Excercises",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/mongodb-sprout-workshop/blob/main/docs/04-spring-data-mongodb/8-Excercises.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Mapping POJOs",permalink:"/mongodb-sprout-workshop/docs/spring-data-mongodb/POJOs"},next:{title:"\ud83d\udca1Repositories and Aggregation",permalink:"/mongodb-sprout-workshop/docs/category/repositories-and-aggregation"}},a={},l=[{value:"Create",id:"create",level:2},{value:"Read",id:"read",level:2},{value:"Update",id:"update",level:2},{value:"Delete",id:"delete",level:2},{value:"Mapping POJOs",id:"mapping-pojos",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"time-to-code",children:"Time to Code!"}),"\n",(0,o.jsx)(n.p,{children:"Now that we've done an overview of CRUD operations with Spring Data MongoDB,\nit's time to implement what we've learned. Everything you need to get coding is available in the\nprevious sections. Once you think you have everything implemented, run the command and see if\neverything runs as expected."}),"\n",(0,o.jsx)(n.h2,{id:"create",children:"Create"}),"\n",(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.code,{children:"Create.java"}),", see if you can implement the following methods:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Save ",(0,o.jsx)(n.code,{children:"grade1"})," to your MongoDB database."]}),"\n",(0,o.jsxs)(n.li,{children:["Save the list of grades, ",(0,o.jsx)(n.code,{children:"grades"})," to your database."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"To test, run;"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mvn spring-boot:run -Dspring-boot.run.arguments=create\n"})}),"\n",(0,o.jsx)(n.h2,{id:"read",children:"Read"}),"\n",(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.code,{children:"Read.java"}),", see if you can implement the following methods:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Find a grade by student ID"}),"\n",(0,o.jsx)(n.li,{children:"Find all grades with student IDs greater than or equal to 10000"}),"\n",(0,o.jsx)(n.li,{children:"Find all grades by student ID and limit by class ID"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"To test, run;"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mvn spring-boot:run -Dspring-boot.run.arguments=read\n"})}),"\n",(0,o.jsx)(n.h2,{id:"update",children:"Update"}),"\n",(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.code,{children:"Update.java"}),", see if you can implement the following methods:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Update a Document by Adding a Comment: Find a document by ",(0,o.jsx)(n.code,{children:"studentId"}),"\nand add a comment to it."]}),"\n",(0,o.jsxs)(n.li,{children:["Upsert a Document: Find a document by ",(0,o.jsx)(n.code,{children:"studentId"})," and ",(0,o.jsx)(n.code,{children:"classId"}),". If the\ndocument exists, update it by adding a new score. If it doesn't exist,\ncreate a new document with the provided details."]}),"\n",(0,o.jsxs)(n.li,{children:["Update Multiple Documents: Find all documents where ",(0,o.jsx)(n.code,{children:"studentId"})," is\ngreater than or equal to 10001, and update them."]}),"\n",(0,o.jsxs)(n.li,{children:["Find and Update a Document: Find a document by ",(0,o.jsx)(n.code,{children:"studentId"}),", update\nit, and save the changes."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"To test, run;"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mvn spring-boot:run -Dspring-boot.run.arguments=update\n"})}),"\n",(0,o.jsx)(n.h2,{id:"delete",children:"Delete"}),"\n",(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.code,{children:"Delete.java"}),", implement the following methods to practice deleting\ndocuments in MongoDB:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Delete a Single Document: Delete a grade it if it exists."}),"\n",(0,o.jsxs)(n.li,{children:["Find and Delete a Document: Find a document with student id of 10002\nby ",(0,o.jsx)(n.code,{children:"studentId"}),", then delete it."]}),"\n",(0,o.jsxs)(n.li,{children:["Delete Multiple Documents: Find all documents where ",(0,o.jsx)(n.code,{children:"studentId"})," is\ngreater than or equal to 10000, and delete them."]}),"\n",(0,o.jsx)(n.li,{children:"Delete all documents in the collection, effectively dropping the\ncollection."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"To test, run;"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mvn spring-boot:run -Dspring-boot.run.arguments=delete\n"})}),"\n",(0,o.jsx)(n.h2,{id:"mapping-pojos",children:"Mapping POJOs"}),"\n",(0,o.jsxs)(n.p,{children:["Lastly, let's map a POJO to our Document. In ",(0,o.jsx)(n.code,{children:"MappingPOJO.java"}),", create\na grade called ",(0,o.jsx)(n.code,{children:"newGrade"})," that has a unique ",(0,o.jsx)(n.code,{children:"ObjectId"}),", a ",(0,o.jsx)(n.code,{children:"studentId"}),"\nof 10003 (decimal), a ",(0,o.jsx)(n.code,{children:"classId"})," of 10 (decimal)."]}),"\n",(0,o.jsx)(n.p,{children:"Also, when creating the new grade, add a score for a homework with a\nscore of 50 (decimal)."}),"\n",(0,o.jsx)(n.p,{children:"To test, run;"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mvn spring-boot:run -Dspring-boot.run.arguments=mapping\n"})})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var o=t(6540);const d={},s=o.createContext(d);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);