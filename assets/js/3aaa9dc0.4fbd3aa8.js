"use strict";(self.webpackChunkmongodb_sprout_workshop=self.webpackChunkmongodb_sprout_workshop||[]).push([[311],{9152:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>u});var d=n(4848),o=n(8453);const a={},s="Update",r={id:"spring-data-mongodb/Update",title:"Update",description:"Updating records involves modifying existing documents in the database. MongoRepository provides",source:"@site/docs/04-spring-data-mongodb/5-Update.mdx",sourceDirName:"04-spring-data-mongodb",slug:"/spring-data-mongodb/Update",permalink:"/mongodb-sprout-workshop/docs/spring-data-mongodb/Update",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/mongodb-sprout-workshop/blob/main/docs/04-spring-data-mongodb/5-Update.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Read",permalink:"/mongodb-sprout-workshop/docs/spring-data-mongodb/Read"},next:{title:"Delete",permalink:"/mongodb-sprout-workshop/docs/spring-data-mongodb/Delete"}},i={},u=[{value:"save (Update a Single Document)",id:"save-update-a-single-document",level:2},{value:"upsert",id:"upsert",level:2},{value:"upsert with MongoTemplate",id:"upsert-with-mongotemplate",level:3},{value:"saveAll (Update Multiple Documents)",id:"saveall-update-multiple-documents",level:2},{value:"Find and Update",id:"find-and-update",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(t.h1,{id:"update",children:"Update"}),"\n",(0,d.jsxs)(t.p,{children:["Updating records involves modifying existing documents in the database. ",(0,d.jsx)(t.code,{children:"MongoRepository"})," provides\nmethods to perform these updates, such as ",(0,d.jsx)(t.code,{children:"save()"})," (which updates if the document exists), and custom query methods."]}),"\n",(0,d.jsx)(t.h2,{id:"save-update-a-single-document",children:"save (Update a Single Document)"}),"\n",(0,d.jsxs)(t.p,{children:["To update a single document, you can use the ",(0,d.jsx)(t.code,{children:"save()"})," method. This method will update the document if it already\nexists based on its ",(0,d.jsx)(t.code,{children:"id"}),", or insert it if it does not exist."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-java",children:"import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class StudentService {\n    @Autowired\n    private StudentRepository repository;\n\n    public Grade updateGrade(Grade grade) {\n        return repository.save(grade);\n    }\n}\n"})}),"\n",(0,d.jsxs)(t.p,{children:["See if you can write a method that adds a comment to an existing grade in the ",(0,d.jsx)(t.code,{children:"Update.java"})," class."]}),"\n",(0,d.jsx)(t.h2,{id:"upsert",children:"upsert"}),"\n",(0,d.jsxs)(t.p,{children:["Upsert refers to updating an existing document or inserting it if it does not exist. This can be achieved using the ",(0,d.jsx)(t.code,{children:"save()"})," method as well."]}),"\n",(0,d.jsx)(t.p,{children:"To upsert a grade based on studentId and classId:"}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-java",children:'@Autowired\nprivate StudentRepository repository;\n\npublic void upsertGrade(double studentId, double classId, Grade grade) {\n    Grade existingGrade = repository.findByStudentIdAndClassId(studentId, classId);\n    if (existingGrade == null) {\n        grade.setId(new ObjectId());\n        grade.setStudentId(studentId);\n        grade.setClassId(classId);\n        grade.setScores(List.of(new Score("homework", 50d)));\n        grade.setComment("You will learn a lot if you read the MongoDB blog!");\n    } else {\n        existingGrade.getScores().add(new Score("quiz", 70d));\n    }\n    Grade upsertedGrade = repository.save(existingGrade != null ? existingGrade : grade);\n    System.out.println("Upserted grade: " + upsertedGrade);\n}\n'})}),"\n",(0,d.jsxs)(t.p,{children:["While the provided method for upserting works, it can be further optimized and made\nmore idiomatic to MongoDB operations. Using the ",(0,d.jsx)(t.code,{children:"save"})," method in Spring Data MongoDB works,\nbut it involves fetching the document first, which can be suboptimal."]}),"\n",(0,d.jsx)(t.h3,{id:"upsert-with-mongotemplate",children:"upsert with MongoTemplate"}),"\n",(0,d.jsx)(t.p,{children:"A more efficient way to perform upserts is by using MongoDB's upsert functionality directly\nin a repository query. This way, you avoid the need to fetch the document first,\nreducing the number of database operations."}),"\n",(0,d.jsxs)(t.p,{children:["Here's how you can do it using ",(0,d.jsx)(t.code,{children:"MongoTemplate"})," for more control and efficiency:"]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-java",children:'@Autowired\nprivate MongoTemplate mongoTemplate;\n\npublic void upsertGrade(double studentId, double classId, Grade grade) {\n    Query query = new Query();\n    query.addCriteria(Criteria.where("studentId").is(studentId)\n            .and("classId").is(classId));\n\n    Update update = new Update();\n    update.set("studentId", studentId);\n    update.set("classId", classId);\n    update.set("comment", "You will learn a lot if you read the MongoDB blog!");\n    update.addToSet("scores").each(new Score("homework", 50d), new Score("quiz", 70d));\n\n    mongoTemplate.upsert(query, update, Grade.class);\n}\n'})}),"\n",(0,d.jsx)(t.h2,{id:"saveall-update-multiple-documents",children:"saveAll (Update Multiple Documents)"}),"\n",(0,d.jsxs)(t.p,{children:["To update multiple documents at once, use the ",(0,d.jsx)(t.code,{children:"saveAll()"})," method provided by the ",(0,d.jsx)(t.code,{children:"StudentRepository"}),".\nPass a list of ",(0,d.jsx)(t.code,{children:"Grade"})," objects to this method, and it will update all the grades in a single batch operation."]}),"\n",(0,d.jsx)(t.p,{children:"To update all grades with studentId greater than or equal to 10001:"}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-java",children:'@Autowired\nprivate StudentRepository repository;\n\npublic void updateGradesForStudentIdGreaterThanEqual(double studentId) {\n    List<Grade> grades = repository.findByStudentIdGreaterThanEqual(studentId);\n    grades.forEach(g -> g.setComment("Updated for all grades with student_id >= 10001"));\n    repository.saveAll(grades);\n    System.out.println("Updated all grades with student_id >= 10001.");\n}\n'})}),"\n",(0,d.jsx)(t.h2,{id:"find-and-update",children:"Find and Update"}),"\n",(0,d.jsx)(t.p,{children:"To find a document and then update it, you first retrieve the document, modify it, and then save it back to the database."}),"\n",(0,d.jsx)(t.p,{children:"To find a grade by studentId and update it:"}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-java",children:'@Autowired\nprivate StudentRepository repository;\n\npublic void findAndUpdateGrade(double studentId, String newComment) {\n    Grade grade = repository.findByStudentId(studentId);\n    if (grade != null) {\n        grade.setComment(newComment);\n        Grade updatedGrade = repository.save(grade);\n        System.out.println("Updated grade after finding: " + updatedGrade);\n    }\n}\n'})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,d.jsx)(t,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var d=n(6540);const o={},a=d.createContext(o);function s(e){const t=d.useContext(a);return d.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),d.createElement(a.Provider,{value:t},e.children)}}}]);