"use strict";(self.webpackChunkmongodb_sprout_workshop=self.webpackChunkmongodb_sprout_workshop||[]).push([[452],{6821:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var n=o(4848),r=o(8453);const i={},s="Customizing Individual Repositories in Spring Data",a={id:"repositories-and-aggregation/Custom-Repositories",title:"Customizing Individual Repositories in Spring Data",description:"Spring Data provides various options to create query methods with little coding. However,",source:"@site/docs/05-repositories-and-aggregation/2-Custom-Repositories.mdx",sourceDirName:"05-repositories-and-aggregation",slug:"/repositories-and-aggregation/Custom-Repositories",permalink:"/mongodb-sprout-workshop/docs/repositories-and-aggregation/Custom-Repositories",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/mongodb-sprout-workshop/blob/main/docs/05-repositories-and-aggregation/2-Custom-Repositories.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Aggregations",permalink:"/mongodb-sprout-workshop/docs/repositories-and-aggregation/Aggregations"},next:{title:"Time to Code!",permalink:"/mongodb-sprout-workshop/docs/repositories-and-aggregation/Exercises"}},c={},l=[{value:"Customizing Repositories",id:"customizing-repositories",level:2},{value:"1. Define a Fragment Interface",id:"1-define-a-fragment-interface",level:2},{value:"2. Implement the Fragment Interface",id:"2-implement-the-fragment-interface",level:2},{value:"3. Extend the Fragment Interface",id:"3-extend-the-fragment-interface",level:2},{value:"Key Points",id:"key-points",level:3}];function m(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"customizing-individual-repositories-in-spring-data",children:"Customizing Individual Repositories in Spring Data"}),"\n",(0,n.jsx)(t.p,{children:"Spring Data provides various options to create query methods with little coding. However,\nwhen those options don\u2019t fit your needs, you can provide your own custom implementation for\nrepository methods. This section describes how to do that."}),"\n",(0,n.jsx)(t.h2,{id:"customizing-repositories",children:"Customizing Repositories"}),"\n",(0,n.jsx)(t.p,{children:"To add custom functionality to a repository, follow these steps:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Define a Fragment Interface:"})," Create an interface for the custom functionality."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Implement the Fragment Interface:"})," Provide the implementation for the custom functionality."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Extend the Fragment Interface:"})," Make your repository interface extend the fragment interface."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"1-define-a-fragment-interface",children:"1. Define a Fragment Interface"}),"\n",(0,n.jsxs)(t.p,{children:["Create an interface with custom methods for your repository. Here is the example from our ",(0,n.jsx)(t.code,{children:"SalesCustomRepository.java"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"package com.mongodb.quickstart.repositories;\n\nimport java.util.List;\nimport com.mongodb.quickstart.dtos.*;\n\npublic interface SalesCustomRepository {\n    List<TotalSalesByLocationDTO> calculateTotalSalesByLocation();\n    List<AverageItemPricePerStoreDTO> averageItemPricePerStore();\n    List<DistinctCustomersCountDTO> countDistinctCustomersByLocation();\n    List<SalesByDayOfWeekDTO> totalSalesByDayOfWeek();\n    List<SalesPerformanceDTO> compareSalesWithAndWithoutCoupons();\n    List<RevenueByLocationDTO> calculateTotalRevenueByLocation();\n    List<CustomerSatisfactionDTO> averageCustomerSatisfactionByLocation();\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"2-implement-the-fragment-interface",children:"2. Implement the Fragment Interface"}),"\n",(0,n.jsxs)(t.p,{children:["Create a class that implements the custom interface. This is just a snippet from our ",(0,n.jsx)(t.code,{children:"SalesCustomRepositoryImpl.java"})," class:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:'package com.mongodb.quickstart.repositories;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.aggregation.*;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.stereotype.Repository;\nimport com.mongodb.quickstart.dtos.*;\n\nimport java.util.List;\n\n@Repository\n@Primary\npublic class SalesCustomRepositoryImpl implements SalesCustomRepository {\n\n    @Autowired\n    private MongoTemplate mongoTemplate;\n\n    // Implementation of custom methods\n\n    @Override\n    public List<TotalSalesByLocationDTO> calculateTotalSalesByLocation() {\n        GroupOperation groupStage = Aggregation.group("storeLocation").count().as("totalSales");\n        Aggregation aggregation = Aggregation.newAggregation(groupStage);\n        AggregationResults<TotalSalesByLocationDTO> results = mongoTemplate.aggregate(aggregation, "sales", TotalSalesByLocationDTO.class);\n        return results.getMappedResults();\n    }\n\n    ...\n}\n'})}),"\n",(0,n.jsx)(t.h2,{id:"3-extend-the-fragment-interface",children:"3. Extend the Fragment Interface"}),"\n",(0,n.jsxs)(t.p,{children:["Make your repository interface extend the fragment interface to combine the CRUD and custom functionality. By adding \u2202our reference\nto our custom repository we are able to use the methods created in both, allowing us to add methods that utilize ",(0,n.jsx)(t.code,{children:"MongoTemplate"}),"\nwith ",(0,n.jsx)(t.code,{children:"MongoRepository"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"package com.mongodb.quickstart.repositories;\n\nimport org.springframework.data.mongodb.repository.MongoRepository;\nimport com.mongodb.quickstart.models.Sale;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface SalesRepository extends MongoRepository<Sale, String>, SalesCustomRepository {\n    // Declare query methods here if needed\n}\n"})}),"\n",(0,n.jsx)(t.h3,{id:"key-points",children:"Key Points"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Fragment Interface:"})," Create an interface for the custom methods."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Fragment Implementation:"})," Implement the interface in a class with the Impl suffix."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Extend the Repository Interface:"})," Extend the fragment interface in your repository to combine CRUD and custom functionality."]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>a});var n=o(6540);const r={},i=n.createContext(r);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);