"use strict";(self.webpackChunkmongodb_sprout_workshop=self.webpackChunkmongodb_sprout_workshop||[]).push([[169],{6295:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>g,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var i=o(4848),t=o(8453);const r={},s="Aggregations",a={id:"repositories-and-aggregation/Aggregations",title:"Aggregations",description:"Aggregation operations in MongoDB process data records and return calculated results.",source:"@site/docs/05-repositories-and-aggregation/1-Aggregations.mdx",sourceDirName:"05-repositories-and-aggregation",slug:"/repositories-and-aggregation/Aggregations",permalink:"/mongodb-sprout-workshop/docs/repositories-and-aggregation/Aggregations",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/mongodb-sprout-workshop/blob/main/docs/05-repositories-and-aggregation/1-Aggregations.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udca1Repositories and Aggregation",permalink:"/mongodb-sprout-workshop/docs/category/repositories-and-aggregation"},next:{title:"Customizing Individual Repositories in Spring Data",permalink:"/mongodb-sprout-workshop/docs/repositories-and-aggregation/Custom-Repositories"}},d={},l=[{value:"Basic Concepts",id:"basic-concepts",level:2},{value:"Aggregation",id:"aggregation",level:2},{value:"Let&#39;s Look at an Example",id:"lets-look-at-an-example",level:2},{value:"Example",id:"example",level:3},{value:"Breakdown of the Code",id:"breakdown-of-the-code",level:3},{value:"A Couple More Options",id:"a-couple-more-options",level:2},{value:"group - GroupOperation",id:"group---groupoperation",level:3},{value:"project - ProjectionOperation",id:"project---projectionoperation",level:3},{value:"unwind - UnwindOperation",id:"unwind---unwindoperation",level:3},{value:"sort / sortByCount - SortOperation / SortByCountOperation",id:"sort--sortbycount---sortoperation--sortbycountoperation",level:3},{value:"Supported Aggregation Operations &amp; Stages",id:"supported-aggregation-operations--stages",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"aggregations",children:"Aggregations"}),"\n",(0,i.jsx)(n.p,{children:"Aggregation operations in MongoDB process data records and return calculated results.\nThey combine values from multiple documents and can perform different operations on\nthis combined data to produce a single result."}),"\n",(0,i.jsx)(n.p,{children:"With an aggregation, each step of the pipeline takes in a document/documents, and transforms the data by\napplying an operation, and then the next stage takes in the output of this stage to apply the next operation."}),"\n",(0,i.jsx)(n.h2,{id:"basic-concepts",children:"Basic Concepts"}),"\n",(0,i.jsxs)(n.p,{children:["The Aggregation Framework in Spring Data MongoDB is built on three main components: ",(0,i.jsx)(n.code,{children:"Aggregation"}),",\n",(0,i.jsx)(n.code,{children:"AggregationDefinition"}),", and ",(0,i.jsx)(n.code,{children:"AggregationResults"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"aggregation",children:"Aggregation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Definition:"})," Represents a MongoDB aggregation operation and holds the instructions for the aggregation pipeline."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Creation:"})," Created using the ",(0,i.jsx)(n.code,{children:"newAggregation(...)"})," method of the Aggregation class, which takes a list of aggregation operations."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Execution:"})," Run using the aggregate method of the ",(0,i.jsx)(n.code,{children:"MongoTemplate"}),", which takes the desired output class as a parameter."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import static org.springframework.data.mongodb.core.aggregation.Aggregation.*;\n\nAggregation agg = newAggregation(\n    pipelineOp1(),\n    pipelineOp2(),\n    pipelineOpn()\n);\n\nAggregationResults<OutputType> results = mongoTemplate.aggregate(agg, "INPUT_COLLECTION_NAME", OutputType.class);\nList<OutputType> mappedResult = results.getMappedResults();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"lets-look-at-an-example",children:"Let's Look at an Example"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"MatchOperation"})," in Spring Data MongoDB is used to filter documents in the aggregation pipeline. It is equivalent to the ",(0,i.jsx)(n.code,{children:"$match"})," stage in\nMongoDB's aggregation framework. The ",(0,i.jsx)(n.code,{children:"MatchOperation"})," allows you to specify criteria to select documents that match specific conditions, similar\nto the find query."]}),"\n",(0,i.jsxs)(n.p,{children:["To create a ",(0,i.jsx)(n.code,{children:"MatchOperation"}),", you use the Criteria class to define the conditions."]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["Assume you have a collection of sales data and you want to filter the documents where the ",(0,i.jsx)(n.code,{children:"storeLocation"}),' is\n"New York" and the ',(0,i.jsx)(n.code,{children:"customer.satisfaction"})," is greater than or equal to 4."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Define the Criteria:"})," Use the Criteria class to define the filtering conditions."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Create the MatchOperation:"})," Use the ",(0,i.jsx)(n.code,{children:"Aggregation.match"})," method with the defined ",(0,i.jsx)(n.code,{children:"Criteria"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Build the Aggregation:"})," Combine the ",(0,i.jsx)(n.code,{children:"MatchOperation"})," with other operations in the aggregation pipeline."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Execute the Aggregation:"})," Use the ",(0,i.jsx)(n.code,{children:"MongoTemplate"})," to execute the aggregation."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Here is a complete example of how to use ",(0,i.jsx)(n.code,{children:"MatchOperation"})," in Spring Data MongoDB:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package com.mongodb.quickstart.repositories;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.aggregation.Aggregation;\nimport org.springframework.data.mongodb.core.aggregation.AggregationResults;\nimport org.springframework.data.mongodb.core.aggregation.MatchOperation;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.stereotype.Repository;\nimport com.mongodb.quickstart.models.Sale;\nimport com.mongodb.quickstart.dtos.SaleDTO;\n\nimport java.util.List;\n\n@Repository\npublic class SalesCustomRepositoryImpl implements SalesCustomRepository {\n\n    @Autowired\n    private MongoTemplate mongoTemplate;\n\n    public List<SaleDTO> findSalesInNewYorkWithHighSatisfaction() {\n        // Step 1: Define the Criteria\n        Criteria criteria = Criteria.where("storeLocation").is("New York")\n                                    .and("customer.satisfaction").gte(4);\n\n        // Step 2: Create the MatchOperation\n        MatchOperation matchStage = Aggregation.match(criteria);\n\n        // Step 3: Build the Aggregation\n        Aggregation aggregation = Aggregation.newAggregation(matchStage);\n\n        // Step 4: Execute the Aggregation\n        AggregationResults<SaleDTO> results = mongoTemplate.aggregate(aggregation, "sales", SaleDTO.class);\n\n        return results.getMappedResults();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"breakdown-of-the-code",children:"Breakdown of the Code"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Define the ",(0,i.jsx)(n.code,{children:"Criteria"}),":","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'Criteria criteria = Criteria.where("storeLocation").is("New York")\n                            .and("customer.satisfaction").gte(4);\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:['This defines a filter to select documents where storeLocation is "New York" and ',(0,i.jsx)(n.code,{children:"customer.satisfaction"})," is greater than or equal to 4."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Create the ",(0,i.jsx)(n.code,{children:"MatchOperation"}),":","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"MatchOperation matchStage = Aggregation.match(criteria);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["This creates a ",(0,i.jsx)(n.code,{children:"MatchOperation"})," with the defined criteria."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Build the Aggregation:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"Aggregation aggregation = Aggregation.newAggregation(matchStage);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["This constructs an aggregation pipeline with only the ",(0,i.jsx)(n.code,{children:"MatchOperation"}),". You can add more stages as needed."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Execute the Aggregation:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'AggregationResults<SaleDTO> results = mongoTemplate.aggregate(aggregation, "sales", SaleDTO.class);\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'This executes the aggregation on the "sales" collection and maps the results to SaleDTO objects.'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"MatchOperation"})," is a way to filter documents in an aggregation pipeline. By defining criteria with the ",(0,i.jsx)(n.code,{children:"Criteria"})," class\nand using the ",(0,i.jsx)(n.code,{children:"Aggregation.match"})," method, you can filter documents based on conditions in Spring Data MongoDB."]}),"\n",(0,i.jsx)(n.h2,{id:"a-couple-more-options",children:"A Couple More Options"}),"\n",(0,i.jsx)(n.h3,{id:"group---groupoperation",children:"group - GroupOperation"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"GroupOperation"})," corresponds to MongoDB's ",(0,i.jsx)(n.code,{children:"$group"})," stage. It is used to group documents by a specified\nkey and perform operations on the grouped data to return a single result for each group."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'GroupOperation groupOperation = Aggregation.group("field").sum("value").as("total");\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:'group("field")'}),": Groups documents by the specified field."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:'sum("value").as("total")'}),": Computes the sum of the value field for each group and stores the result in a field named total."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"project---projectionoperation",children:"project - ProjectionOperation"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ProjectionOperation"})," corresponds to MongoDB's ",(0,i.jsx)(n.code,{children:"$project"})," stage. It reshapes each document in the stream\nby including, excluding, or adding new fields."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'ProjectionOperation projectOperation = Aggregation.project("field1", "field2")\n    .andExpression("field1 + field2").as("newField");\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:'project("field1", "field2")'}),": Includes field1 and field2 in the output documents."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:'andExpression("field1 + field2").as("newField")'}),": Adds a new field by combining field1 and field2."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"unwind---unwindoperation",children:"unwind - UnwindOperation"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"UnwindOperation"})," corresponds to MongoDB's ",(0,i.jsx)(n.code,{children:"$unwind"})," stage. It deconstructs an array field\nfrom the input documents to output a document for each element of the array."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'UnwindOperation unwindOperation = Aggregation.unwind("arrayField");\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:'unwind("arrayField")'}),": The name of the array field to unwind. Each element of the array will be output as a separate document."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"sort--sortbycount---sortoperation--sortbycountoperation",children:"sort / sortByCount - SortOperation / SortByCountOperation"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"SortOperation"})," corresponds to MongoDB's ",(0,i.jsx)(n.code,{children:"$sort"})," stage, which sorts input documents in the specified order.\nThe ",(0,i.jsx)(n.code,{children:"SortByCountOperation"})," is used for sorting by count."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'SortOperation sortOperation = Aggregation.sort(Sort.by(Sort.Order.asc("field1"), Sort.Order.desc("field2")));\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"sort(Sort.by(...))"}),": Sorts documents by the specified fields."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:'Sort.Order.asc("field1")'}),": Sorts documents in ascending order by field1."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:'Sort.Order.desc("field2")'}),": Sorts documents in descending order by field2."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'SortByCountOperation sortByCountOperation = Aggregation.sortByCount("field");\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:'sortByCount("field")'}),": Groups documents by field and sorts by the count of each group."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"supported-aggregation-operations--stages",children:"Supported Aggregation Operations & Stages"}),"\n",(0,i.jsx)(n.p,{children:"The Spring Data MongoDB has support for the following Operations & Stages:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"addFields - AddFieldsOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"bucket / bucketAuto - BucketOperation / BucketAutoOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"count - CountOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"densify - DensifyOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"facet - FacetOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"geoNear - GeoNearOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"graphLookup - GraphLookupOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"group - GroupOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"limit - LimitOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"lookup - LookupOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"match - MatchOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"merge - MergeOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"project - ProjectionOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"redact - RedactOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"replaceRoot - ReplaceRootOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"sample - SampleOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"set - SetOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"setWindowFields - SetWindowFieldsOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"skip - SkipOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"sort / sortByCount - SortOperation / SortByCountOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"unionWith - UnionWithOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"unset - UnsetOperation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"unwind - UnwindOperation"}),"\n"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>a});var i=o(6540);const t={},r=i.createContext(t);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);