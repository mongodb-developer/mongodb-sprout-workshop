"use strict";(self.webpackChunkmongodb_sprout_workshop=self.webpackChunkmongodb_sprout_workshop||[]).push([[487],{8325:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var i=t(4848),o=t(8453);const r={},a="CSFLE",s={id:"transactions-and-encryption/csfle",title:"CSFLE",description:"This section explores the integration of MongoDB's Client-Side Field Level Encryption (CSFLE) with Spring Data MongoDB,",source:"@site/docs/06-transactions-and-encryption/2-csfle.mdx",sourceDirName:"06-transactions-and-encryption",slug:"/transactions-and-encryption/csfle",permalink:"/mongodb-sprout-workshop/docs/transactions-and-encryption/csfle",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/mongodb-sprout-workshop/blob/main/docs/06-transactions-and-encryption/2-csfle.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Transactions",permalink:"/mongodb-sprout-workshop/docs/transactions-and-encryption/transactions"},next:{title:"\ud83c\udfaf Summary",permalink:"/mongodb-sprout-workshop/docs/summary"}},c={},l=[{value:"How it Works",id:"how-it-works",level:2},{value:"The Master Key",id:"the-master-key",level:2},{value:"The Key Management Service (KMS) Provider",id:"the-key-management-service-kms-provider",level:2},{value:"The Clients",id:"the-clients",level:2},{value:"ClientEncryption",id:"clientencryption",level:3},{value:"MongoClient",id:"mongoclient",level:3},{value:"Unique Index on Key Alternate Names",id:"unique-index-on-key-alternate-names",level:2},{value:"Create Data Encryption Keys",id:"create-data-encryption-keys",level:2},{value:"Create and insert encrypted documents using the DEKs.",id:"create-and-insert-encrypted-documents-using-the-deks",level:2},{value:"Bobby",id:"bobby",level:3},{value:"Alice",id:"alice",level:3},{value:"Deterministic: AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic",id:"deterministic-aead_aes_256_cbc_hmac_sha_512-deterministic",level:3},{value:"Non-deterministic: AEAD_AES_256_CBC_HMAC_SHA_512-Random",id:"non-deterministic-aead_aes_256_cbc_hmac_sha_512-random",level:3},{value:"Querying Encrypted Documents",id:"querying-encrypted-documents",level:2},{value:"Removing DEK and Querying Document",id:"removing-dek-and-querying-document",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"csfle",children:"CSFLE"}),"\n",(0,i.jsx)(n.p,{children:"This section explores the integration of MongoDB's Client-Side Field Level Encryption (CSFLE) with Spring Data MongoDB,\nfocusing on securing data directly from the client side before it is stored in the database. This approach is crucial\nfor compliance with data privacy laws and regulations."}),"\n",(0,i.jsx)(n.h2,{id:"how-it-works",children:"How it Works"}),"\n",(0,i.jsx)(n.p,{children:"CSFLE encrypts sensitive data before it reaches the MongoDB cluster, making the data remain secure during transit\nand at rest. The process involves generating a master key, creating Data Encryption Keys (DEK), encrypting specific\nfields in your documents, and securely managing the keys."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Architecture for CSLFE",src:t(752).A+"",width:"969",height:"685"})}),"\n",(0,i.jsx)(n.p,{children:"While you can use MongoDB as your key vault, you can use other providers."}),"\n",(0,i.jsx)(n.p,{children:"Key Concepts"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Encryption"}),": CSFLE encrypts sensitive data before it reaches the MongoDB cluster, ensuring that the\ndata remains secure during transit and at rest."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Master Key"}),": A master key is used to encrypt Data Encryption Keys (DEK). The master key must be securely\nmanaged and protected."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data Encryption Keys (DEK)"}),": DEKs are used to encrypt individual fields within the MongoDB documents.\nDEKs themselves are encrypted using the master key."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Manual and Automatic Encryption"}),": CSFLE supports both manual and automatic encryption. In this workshop,\nwe will use manual encryption which does not require MongoDB Enterprise or Atlas."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:'CSFLE is an excellent tool for ensuring compliance with data protection regulations such as GDPR.\nIt provides a method to securely encrypt and manage sensitive data fields, allowing for easy implementation\nof "right-to-be-forgotten" policies by simply deleting the corresponding DEKs. This ensures that data\ncannot be restored from backups or logs once the key is deleted, making it a powerful feature for data\nprivacy and security.'}),"\n",(0,i.jsx)(n.h2,{id:"the-master-key",children:"The Master Key"}),"\n",(0,i.jsx)(n.p,{children:"A master key is necessary to encrypt and decrypt Data Encryption Keys (DEK).\nHere\u2019s how you can generate and store a master key locally:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\n\npublic class MasterKey {\n    private static final int SIZE_MASTER_KEY = 96;\n    private static final String MASTER_KEY_FILENAME = "master_key.txt";\n\n    public static void main(String[] args) {\n        new MasterKey().tutorial();\n    }\n\n    private void tutorial() {\n        final byte[] masterKey = generateNewOrRetrieveMasterKeyFromFile(MASTER_KEY_FILENAME);\n        System.out.println("Master Key: " + Arrays.toString(masterKey));\n    }\n\n    private byte[] generateNewOrRetrieveMasterKeyFromFile(String filename) {\n        byte[] masterKey = new byte[SIZE_MASTER_KEY];\n        try {\n            retrieveMasterKeyFromFile(filename, masterKey);\n            System.out.println("An existing Master Key was found in file \\"" + filename + "\\".");\n        } catch (IOException e) {\n            masterKey = generateMasterKey();\n            saveMasterKeyToFile(filename, masterKey);\n            System.out.println("A new Master Key has been generated and saved to file \\"" + filename + "\\".");\n        }\n        return masterKey;\n    }\n\n    private void retrieveMasterKeyFromFile(String filename, byte[] masterKey) throws IOException {\n        try (FileInputStream fis = new FileInputStream(filename)) {\n            fis.read(masterKey, 0, SIZE_MASTER_KEY);\n        }\n    }\n\n    private byte[] generateMasterKey() {\n        byte[] masterKey = new byte[SIZE_MASTER_KEY];\n        new SecureRandom().nextBytes(masterKey);\n        return masterKey;\n    }\n\n    private void saveMasterKeyToFile(String filename, byte[] masterKey) {\n        try (FileOutputStream fos = new FileOutputStream(filename)) {\n            fos.write(masterKey);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This code generates a 96-byte master key using a secure random number generator and stores it in a local file named ",(0,i.jsx)(n.code,{children:"master_key.txt"}),".\nIf the file already exists, it reads the key from the file."]}),"\n",(0,i.jsx)(n.h2,{id:"the-key-management-service-kms-provider",children:"The Key Management Service (KMS) Provider"}),"\n",(0,i.jsx)(n.p,{children:"Set up the key management service (KMS) provider to use the master key for creating and managing DEKs."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.util.HashMap;\nimport java.util.Map;\n\npublic class KeyManagementService {\n    public static Map<String, Map<String, Object>> getKmsProviders(byte[] localMasterKey) {\n        Map<String, Map<String, Object>> kmsProviders = new HashMap<>();\n        kmsProviders.put("local", new HashMap<>() {{\n            put("key", localMasterKey);\n        }});\n        return kmsProviders;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This code sets up a local KMS provider using the master key. The KMS provider will be used to create and manage DEKs."}),"\n",(0,i.jsx)(n.h2,{id:"the-clients",children:"The Clients"}),"\n",(0,i.jsx)(n.p,{children:"Set up two different clients:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ClientEncryption"}),": Used to create Data Encryption Keys (DEK) and encrypt fields manually."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MongoClient"}),": A conventional MongoDB connection used to read and write documents, configured to\nautomatically decrypt the encrypted fields."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"clientencryption",children:"ClientEncryption"}),"\n",(0,i.jsxs)(n.p,{children:["This code creates a ",(0,i.jsx)(n.code,{children:"ClientEncryption"})," instance using the KMS provider and key vault namespace."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import com.mongodb.*;\nimport com.mongodb.client.vault.ClientEncryption;\nimport com.mongodb.client.vault.ClientEncryptions;\nimport com.mongodb.client.model.vault.ClientEncryptionSettings;\n\npublic class EncryptionClient {\n    public static ClientEncryption getClientEncryption(Map<String, Map<String, Object>> kmsProviders) {\n        ClientEncryptionSettings ces = ClientEncryptionSettings.builder()\n                .keyVaultMongoClientSettings(MongoClientSettings.builder()\n                        .applyConnectionString(new ConnectionString("mongodb://localhost"))\n                        .build())\n                .keyVaultNamespace("csfle.vault")\n                .kmsProviders(kmsProviders)\n                .build();\n\n        return ClientEncryptions.create(ces);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"mongoclient",children:"MongoClient"}),"\n",(0,i.jsxs)(n.p,{children:["This code creates a ",(0,i.jsx)(n.code,{children:"MongoClient"})," instance configured with auto-encryption settings to automatically decrypt encrypted fields."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import com.mongodb.MongoClientSettings;\nimport com.mongodb.client.MongoClients;\nimport com.mongodb.client.MongoClient;\nimport com.mongodb.client.model.vault.AutoEncryptionSettings;\n\npublic class MongoDBClient {\n    public static MongoClient getMongoClient(Map<String, Map<String, Object>> kmsProviders) {\n        AutoEncryptionSettings aes = AutoEncryptionSettings.builder()\n                .keyVaultNamespace("csfle.vault")\n                .kmsProviders(kmsProviders)\n                .bypassAutoEncryption(true)\n                .build();\n\n        MongoClientSettings mcs = MongoClientSettings.builder()\n                .applyConnectionString(new ConnectionString("mongodb://localhost"))\n                .autoEncryptionSettings(aes)\n                .build();\n\n        return MongoClients.create(mcs);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"unique-index-on-key-alternate-names",children:"Unique Index on Key Alternate Names"}),"\n",(0,i.jsx)(n.p,{children:"Before creating your first Data Encryption Key (DEK), create a unique index on the\nkey alternate names to ensure that each key has a unique name."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import com.mongodb.client.MongoCollection;\nimport org.bson.Document;\n\npublic class IndexManager {\n    public static void createUniqueIndex(MongoCollection<Document> vaultCollection) {\n        vaultCollection.createIndex(ascending("keyAltNames"),\n                new IndexOptions().unique(true).partialFilterExpression(exists("keyAltNames")));\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This code creates a unique index on the ",(0,i.jsx)(n.code,{children:"keyAltNames"})," field in the key vault collection\nto ensure that each DEK has a unique name."]}),"\n",(0,i.jsx)(n.h2,{id:"create-data-encryption-keys",children:"Create Data Encryption Keys"}),"\n",(0,i.jsx)(n.p,{children:"Create Data Encryption Keys (DEK) for encrypting specific fields in your documents."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.bson.BsonBinary;\nimport com.mongodb.client.vault.ClientEncryption;\n\npublic class DataEncryptionKeyManager {\n    public static BsonBinary createDataEncryptionKey(ClientEncryption encryption, String keyAltName) {\n        return encryption.createDataKey("local", new DataKeyOptions().keyAltNames(List.of(keyAltName)));\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This creates a DEK with a specified alternate name using the ClientEncryption instance."}),"\n",(0,i.jsx)(n.h2,{id:"create-and-insert-encrypted-documents-using-the-deks",children:"Create and insert encrypted documents using the DEKs."}),"\n",(0,i.jsx)(n.p,{children:"This snippet creates a document with encrypted fields and inserts it into the specified MongoDB collection. It is paraphrased from\nthe repo we provided you:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.bson.BsonBinary;\nimport org.bson.BsonString;\nimport org.bson.Document;\nimport com.mongodb.client.MongoCollection;\nimport com.mongodb.client.vault.ClientEncryption;\n\npublic class DocumentManager {\n    public static Document createEncryptedDocument(ClientEncryption encryption, String name, int age, String phone, String bloodType, BsonBinary keyId) {\n        BsonBinary encryptedPhone = encryption.encrypt(new BsonString(phone), new EncryptOptions("AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic").keyId(keyId));\n        BsonBinary encryptedBloodType = encryption.encrypt(new BsonString(bloodType), new EncryptOptions("AEAD_AES_256_CBC_HMAC_SHA_512-Random").keyId(keyId));\n\n        return new Document("name", name)\n                .append("age", age)\n                .append("phone", encryptedPhone)\n                .append("blood_type", encryptedBloodType);\n    }\n\n    public static void insertDocuments(MongoCollection<Document> collection, Document... documents) {\n        collection.insertMany(Arrays.asList(documents));\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Here is what Bobby and Alice documents look like in my ",(0,i.jsx)(n.code,{children:"encrypted.users"})," collection:"]}),"\n",(0,i.jsx)(n.h3,{id:"bobby",children:"Bobby"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "_id" : ObjectId("6054d91c26a275034fe53300"),\n  "name" : "Bobby",\n  "age" : 33,\n  "phone" : BinData(6,"ATKkRdZWR0+HpqNyYA7zgIUCgeBE4SvLRwaXz/rFl8NPZsirWdHRE51pPa/2W9xgZ13lnHd56J1PLu9uv/hSkBgajE+MJLwQvJUkXatOJGbZd56BizxyKKTH+iy+8vV7CmY="),\n  "blood_type" : BinData(6,"AjKkRdZWR0+HpqNyYA7zgIUCUdc30A8lTi2i1pWn7CRpz60yrDps7A8gUJhJdj+BEqIIx9xSUQ7xpnc/6ri2/+ostFtxIq/b6IQArGi+8ZBISw=="),\n  "medical_record" : BinData(6,"AjKkRdZWR0+HpqNyYA7zgIUESl5s4tPPvzqwe788XF8o91+JNqOUgo5kiZDKZ8qudloPutr6S5cE8iHAJ0AsbZDYq7XCqbqiXvjQobObvslR90xJvVMQidHzWtqWMlzig6ejdZQswz2/WT78RrON8awO")\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"alice",children:"Alice"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "_id" : ObjectId("6054d91c26a275034fe53301"),\n  "name" : "Alice",\n  "age" : 28,\n  "phone" : BinData(6,"AX7Xd65LHUcWgYj+KbUT++sCC6xaCZ1zaMtzabawAgB79quwKvld8fpA+0m+CtGevGyIgVRjtj2jAHAOvREsoy3oq9p5mbJvnBqi8NttHUJpqooUn22Wx7o+nlo633QO8+c="),\n  "blood_type" : BinData(6,"An7Xd65LHUcWgYj+KbUT++sCTyp+PJXudAKM5HcdX21vB0VBHqEXYSplHdZR0sCOxzBMPanVsTRrOSdAK5yHThP3Vitsu9jlbNo+lz5f3L7KYQ==")\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Client Side Field Level Encryption currently provides\ntwo different algorithms to encrypt the data you want to secure."}),"\n",(0,i.jsx)(n.h3,{id:"deterministic-aead_aes_256_cbc_hmac_sha_512-deterministic",children:"Deterministic: AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"}),"\n",(0,i.jsx)(n.p,{children:"With this algorithm, the result of the encryption \u2500 given the same inputs (value and DEK) \u2500 is\ndeterministic. This means that we have a greater support for read operations, but encrypted data with low\ncardinality is susceptible to frequency analysis attacks, where bad actors can continually monitor encrypted data to reverse-engineer the\nencryption.\nIf I want to be able to retrieve users by phone numbers, I must use the deterministic algorithm. As a phone number is likely\nto be unique in my collection of users, it's safe to use this algorithm here."}),"\n",(0,i.jsx)(n.h3,{id:"non-deterministic-aead_aes_256_cbc_hmac_sha_512-random",children:"Non-deterministic: AEAD_AES_256_CBC_HMAC_SHA_512-Random"}),"\n",(0,i.jsx)(n.p,{children:"With this algorithm, the result of the encryption is always different. It provides the strongest guarantees of data\nconfidentiality, even when the cardinality is low, but prevents read operations based on these fields.\nIn my example, the blood type has a low cardinality and it doesn't make sense to search in my user collection by blood type anyway, so it's\nsafe to use this algorithm for this field."}),"\n",(0,i.jsx)(n.h2,{id:"querying-encrypted-documents",children:"Querying Encrypted Documents"}),"\n",(0,i.jsx)(n.p,{children:"To query encrypted fields, you need to encrypt the query field using the same DEK.\nTo read Bobby's Document:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.bson.BsonBinary;\nimport org.bson.BsonString;\nimport com.mongodb.client.MongoCollection;\nimport com.mongodb.client.vault.ClientEncryption;\nimport org.bson.Document;\n\npublic class QueryManager {\n    public static Document findEncryptedDocumentByPhone(ClientEncryption encryption, MongoCollection<Document> collection, String phone, String keyAltName) {\n        BsonBinary encryptedPhone = encryption.encrypt(new BsonString(phone), new EncryptOptions("AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic").keyAltName(keyAltName));\n        return collection.find(eq("phone", encryptedPhone)).first();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This encrypts the phone number using the DEK associated with Bobby and uses this encrypted\nvalue to query the users collection for Bobby's document. The result is then printed out."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "_id": {\n    "$oid": "6054d91c26a275034fe53300"\n  },\n  "name": "Bobby",\n  "age": 33,\n  "phone": "01 23 45 67 89",\n  "blood_type": "A+",\n  "medical_record": [\n    {\n      "test": "heart",\n      "result": "bad"\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"removing-dek-and-querying-document",children:"Removing DEK and Querying Document"}),"\n",(0,i.jsx)(n.p,{children:"To remove Alice's Document and verify that removing a DEK makes the associated encrypted data irretrievable."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class KeyRemovalTest {\n    public static void main(String[] args) {\n        byte[] localMasterKey = getMasterKey("master_key.txt");\n        Map<String, Map<String, Object>> kmsProviders = KeyManagementService.getKmsProviders(localMasterKey);\n\n        MongoClient mongoClient = MongoDBClient.getMongoClient(kmsProviders);\n        MongoCollection<Document> vaultCollection = mongoClient.getDatabase("csfle").getCollection("vault");\n\n        // Remove Alice\'s DEK\n        vaultCollection.deleteOne(eq("keyAltNames", "Alice"));\n\n        // Attempt to read Alice\'s document\n        MongoCollection<Document> usersCollection = mongoClient.getDatabase("test").getCollection("users");\n        Document aliceDoc = usersCollection.find(eq("name", "Alice")).first();\n\n        if (aliceDoc != null) {\n            System.out.println("Alice\'s document: " + aliceDoc.toJson());\n        } else {\n            System.out.println("Alice\'s document not found.");\n        }\n    }\n\n    private static byte[] getMasterKey(String filename) {\n        byte[] masterKey = new byte[96];\n        try (FileInputStream fis = new FileInputStream(filename)) {\n            fis.read(masterKey, 0, 96);\n        } catch (IOException e) {\n            throw new RuntimeException("Failed to read master key from file", e);\n        }\n        return masterKey;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This deletes Alice's DEK from the key vault collection and attempts to read Alice's document\nfrom the users collection. Without the DEK, the encrypted fields in Alice's document cannot be decrypted,\ndemonstrating the security of CSFLE."}),"\n",(0,i.jsxs)(n.p,{children:["If I try to read it immediately after deleting her document, there is a great chance that I will still able to do so because of the\n",(0,i.jsx)(n.a,{href:"https://github.com/mongodb/specifications/blob/master/source/client-side-encryption/client-side-encryption.md",children:"60 seconds Data Encryption Key Cache"})," that is managed by ",(0,i.jsx)(n.code,{children:"libmongocrypt"}),".\nThis cache is important because, without it, multiple back-and-forth would be necessary to decrypt the\ndocument. It's critical to prevent CSFLE from killing the performances of your MongoDB cluster."]}),"\n",(0,i.jsxs)(n.p,{children:["To see all this in action, run the ",(0,i.jsx)(n.code,{children:"ClientSideFieldLevelEncryption"})," class:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'mvn spring-boot:run -Dspring-boot.run.arguments="csfle"\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},752:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/csfle-diagram-3e923870493c8468f3a9b2811604389a.jpg"},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(6540);const o={},r=i.createContext(o);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);