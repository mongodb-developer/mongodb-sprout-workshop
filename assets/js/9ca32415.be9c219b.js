"use strict";(self.webpackChunkmongodb_sprout_workshop=self.webpackChunkmongodb_sprout_workshop||[]).push([[923],{5136:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var t=o(4848),s=o(8453);const i={},r="Mapping POJOs",a={id:"spring-data-mongodb/POJOs",title:"Mapping POJOs",description:"In Spring Data MongoDB, POJOs (Plain Old Java Objects) are mapped to MongoDB documents using annotations.",source:"@site/docs/04-spring-data-mongodb/7-POJOs.mdx",sourceDirName:"04-spring-data-mongodb",slug:"/spring-data-mongodb/POJOs",permalink:"/mongodb-sprout-workshop/docs/spring-data-mongodb/POJOs",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/mongodb-sprout-workshop/blob/main/docs/04-spring-data-mongodb/7-POJOs.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Delete",permalink:"/mongodb-sprout-workshop/docs/spring-data-mongodb/Delete"},next:{title:"Time to Code!",permalink:"/mongodb-sprout-workshop/docs/spring-data-mongodb/Excercises"}},d={},c=[{value:"Define the POJO Class",id:"define-the-pojo-class",level:2},{value:"Use Annotations for Mapping",id:"use-annotations-for-mapping",level:2},{value:"Nested Objects",id:"nested-objects",level:2},{value:"Repository Definition",id:"repository-definition",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"mapping-pojos",children:"Mapping POJOs"}),"\n",(0,t.jsx)(n.p,{children:"In Spring Data MongoDB, POJOs (Plain Old Java Objects) are mapped to MongoDB documents using annotations.\nThis mapping allows for the conversion between Java objects and MongoDB documents seamlessly. Here\u2019s a step-by-step\nguide on how POJOs are mapped with Spring Data MongoDB:"}),"\n",(0,t.jsx)(n.h2,{id:"define-the-pojo-class",children:"Define the POJO Class"}),"\n",(0,t.jsx)(n.p,{children:"Start by defining your POJO class that represents the MongoDB document. Use annotations to specify how the fields\nof the class are mapped to the fields of the MongoDB document."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package com.mongodb.quickstart.models;\n\nimport org.bson.types.ObjectId;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\nimport org.springframework.data.mongodb.core.mapping.Field;\n\nimport java.util.List;\n\n@Document(collection = "grades")\npublic class Grade {\n\n    @Id\n    private ObjectId id;\n\n    @Field("studentId")\n    private String studentId;\n\n    private Double classId;\n    private List<Score> scores;\n    private String comment;\n\n    // Getters and Setters\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"use-annotations-for-mapping",children:"Use Annotations for Mapping"}),"\n",(0,t.jsx)(n.p,{children:"Annotations help Spring Data MongoDB understand how to map the fields in your Java class to the fields in the MongoDB document:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@Document"}),": Marks a class as being a MongoDB document. The ",(0,t.jsx)(n.code,{children:"collection"})," attribute specifies which collection to store the document in."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@Id"}),": Marks a field as the primary key (unique identifier) of the document."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@Field"}),": Maps a Java field to a field in the MongoDB document."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"nested-objects",children:"Nested Objects"}),"\n",(0,t.jsxs)(n.p,{children:["You can also map nested objects within a document. For example, if your ",(0,t.jsx)(n.code,{children:"Sale"})," document contains a ",(0,t.jsx)(n.code,{children:"Customer"})," object and a list of ",(0,t.jsx)(n.code,{children:"Item"})," objects,\ndefine these nested classes separately and use them in your main POJO."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class Score {\n    private String type;\n    private Double score;\n\n    // Getters and Setters\n}\n\n"})}),"\n",(0,t.jsx)(n.h2,{id:"repository-definition",children:"Repository Definition"}),"\n",(0,t.jsx)(n.p,{children:"We now circle back to our repository. Define a repository interface to perform CRUD operations on your MongoDB documents.\nSpring Data MongoDB provides the MongoRepository interface for this purpose."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"package com.mongodb.quickstart.repositories;\n\nimport org.springframework.data.mongodb.repository.MongoRepository;\nimport com.mongodb.quickstart.models.Sale;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface StudentRepository extends MongoRepository<Grade, String> {\n    // Additional query methods can be defined here\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"By using these annotations and repository interfaces, Spring Data MongoDB makes it easy to map POJOs to MongoDB documents and\nperform database operations with minimal code."})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>a});var t=o(6540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);